<?php

/**
 * @file
 * Contains wristcheck_basic.module.
 */

use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\RedirectCommand;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\user\Entity\User;
use Drupal\user\UserInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Site\Settings;
use Drupal\commerce_order\Entity\Order;
use Drupal\commerce_order\Adjustment;
use Drupal\commerce_price\Price;

/**
 * Implements hook_help().
 */
function wristcheck_basic_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the wristcheck_basic module.
    case 'help.page.wristcheck_basic':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('WristCheck Basic functions &amp; forms &amp; configurations &amp; pages.') . '</p>';
      return $output;

    default:
  }
}

/**
 * @param $key
 * @param $message
 * @param $params
 *  hook_mail
 */
function wristcheck_basic_mail($key, &$message, $params) {
  if ($key == 'smtp-test') {
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['body'];
  }
}

/**
 * @param $form
 * @param $form_state
 * @param $form_id
 * faq authsystem
 */
function wristcheck_basic_form_alter(&$form, &$form_state, $form_id){
  if($form_id == "webform_submission_faq_authsystem_add_form"){
    $form['actions']['submit']['#type'] = 'button';
  }
//  var_dump($form);
//  var_dump($form_state['base_form_id']);
//  if($form_id =="commerce-product-add-to-cart-form"){
//    var_dump($form_state);
//  if($form_id  == "commerce_order_item_add_to_cart_form_commerce_product_10"){
//    var_dump($form_state->getTriggeringElement());
////    var_dump($form_state->getTriggeringElement()['#edit-submit--2']);
//  }
//  }
}
//function wristcheck_basic_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
////  exit('hello');
//  var_dump($build);
//  var_dump($block);
//  exit('hello');
////  if ($block->getBaseId() === 'faq_contact_us') {
////    $build['#pre_render'][] = 'wristcheck_basic_block_poweredby_prerender';
////  }
//}
//
//function wristcheck_basic_block_poweredby_prerender(array $build) {
////  exit('hello');
//  $build['content']['#markup'] = Markup::create('Your text');
//  return $build;
//}
/**
 * Implements hook_theme().
 */
function wristcheck_basic_theme()
{
  return [
    'wristcheck_basic' => [
      'render element' => 'children',
    ],
    'wristcheck_homepage' => [
      'variables' => ['test_var' => NULL],
    ],
    'wristcheck_buy' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_category' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_user_info' => [
      'variables' => [
        'variables' => []
      ]
    ],

    'wristcheck_user_buy' => [
      'variables' => [
        'variables' => []
      ]
    ],

    'wristcheck_user_sell' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_user_portfolio' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_profile_payment_main' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_payment_success' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_sellperson' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_sellwatchinput' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_payment_step' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_discover' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_magazine' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_single' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_user_useractivate' => [
      'variables' => [
        'variables' => []
      ]
    ],

    'wristcheck_faq_sellstep' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_faq_authsystem' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_faq_authsystemstep' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_eshop' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_faq' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_user_supplement_form' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_sell' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_sellsecond' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_banner_block' => [
      'variables' => []
    ],
    'wristcheck_faq_checkout_block' => [
      'variables' => [
           'variables' => []
      ]
    ],
    'wristcheck_faq_checkvalue_block' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_download_app_block' => [
      'variables' => []
    ],
    'wristcheck_paymentstep_block' => [
      'variables' => []
    ],
    'wristcheck_selling_process_block' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_search_product_block' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_free_advertising_block' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_sell_video_block' => [
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_selling_process_single_image_block'=>[
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_how_it_works_block' =>[
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_sign_up_for_news_block' =>[
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_filter_product_block'=>[
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_error_404'=>[
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_user_login'=>[
      'variables' => [
        'variables' => []
      ]
    ],
    'wristcheck_error_403'=>[
      'variables' => [
        'variables' => []
      ]
    ]
  ];
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 *
 * @param                                      $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param                                      $form_id
 */
function wristcheck_basic_form_node_wcshw_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // is create 2 watch.
  $userid = \Drupal::currentUser()->id();
  if ($form_state->getFormObject()->getEntity()->isNew()) {
    $user = User::load($userid);

    $check_field = [
      'field_surnames',
      'field_full_name',
      'field_phone_number',
    ];

    $infoisfull = TRUE;

    foreach($check_field as $field) {
      if ($user->get($field)->isEmpty()) {
        \Drupal::messenger()->addError(t('User information must be completed to create a second-hand watch: @userinfo', [
          '@userinfo' => implode(',', ['Surnames', 'Full name', 'Phone number']),
        ]));
        $infoisfull = FALSE;
        break;
      }
    }

    $path = \Drupal\Core\Url::fromRoute('entity.user.edit_form', ['user' => $userid], ['query' => \Drupal::destination()->getAsArray()])->toString();

    if (!$infoisfull) {
      // goto user edit page.
      $response = new RedirectResponse($path);
      $response->send();
    }
  }
}

//function wristcheck_basic_entity_type_build($entity_types) {
////  $entity_types['commerce_order_item']->setFormClass('add_to_cart', '\Drupal\commerce_cart\Form\AddToCartForm');
//  $entity_types['commerce_order_item']->setFormClass('CustomAddtoCartForm', '\Drupal\wristcheck_basic\Form\CustomAddToCartForm');
////  var_dump($entity_types);
//}

//function wristcheck_basic_preprocess_commerce_product(&$variables) {
//  $product = $variables['elements']['#commerce_product'];
//  var_dump($product->variation_id);
//}

//function wristcheck_basic_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
//  if(in_array($entity->bundle(), ['wcshw'])) {
//    $operations = array();
//    $operations['create'] = array(
//      'title' => t('Create'),
//      'url' =>  \Drupal\Core\Url::fromRoute('node.add',['node_type'=> 'wcshw']),
//      'weight' => 30,
//    );
//    return $operations;
//  }
//}

//function wristcheck_basic_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
//
// If not the view we are looking, move on
//if ($form['#id'] != 'views-exposed-form-the-art-block-1') {
//  return FALSE;
//}
//
//// Query nodes
//$storage = Drupal::getContainer()->get('entity_type.manager')->getStorage('node');
//$nids = $storage->getQuery();
//
//// Gather published artist nodes and sort by title
//$nids = $nids->condition('type', 'artist')
//  ->condition('status', 1)
//  ->sort('title')
//  ->execute();
//
//// If there are no nodes, move on
//if (!$nids) {
//  return FALSE;
//}
//
//// Start building out the options for our select list
//$options = [];
//$nodes = $storage->loadMultiple($nids);
//
//// Push titles into select list
//foreach ($nodes as $node) {
//  $options[$node->id()] = $node->getTitle();
//}
//
//// Start building out our new form element
//$artist_field = 'artist';
//$form[$artist_field]['#type'] = 'select';
//$form[$artist_field]['#multiple'] = FALSE;
//
//// Specify the empty option for our select list
//$form[$artist_field]['#empty_option'] = t('Artist');
//
//// Add the $options from above to our select list
//$form[$artist_field]['#options'] = $options;
//unset($form[$artist_field]['#size']);
//}

/**
 * Implements hook_cron().
 */
function wristcheck_basic_cron() {
  $currency_api = Settings::get('currency_api');
  $client = \Drupal::httpClient();
  $connection = \Drupal::service('database');
  $query = $connection->query("SELECT unit, date FROM currency");
  $result = $query->fetchAll();
  foreach ($result as $value) {
    $unit = $value->unit;
    $date = $value->date;
    $current_date = date('Y-m-d', time());
    if ($date == $current_date) {
      // update currency once every day
      break;
    }
    $url = $currency_api . $unit;
    $request = $client->request('GET', $url);
    $statusCode = $request->getStatusCode();
    if($statusCode == '200') {
      $contents = $request->getBody()->getContents();
      $json = json_decode($contents);
      $rate = json_encode($json->conversion_rates);
      $connection->update('currency')
        ->fields([
          'rate' => $rate,
          'date' => date('Y-m-d', time()),
        ])
        ->condition('unit', $unit, '=')
        ->execute();
      \Drupal::logger('wristcheck_basic')->notice(date('Y-m-d H:i:s', time()) . ': Update '. $unit . ' currency rates');
    }
    else {
      \Drupal::logger('wristcheck_basic')->error(date('Y-m-d H:i:s', time()) . ': Get '. $unit .' currency rates error');
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function wristcheck_basic_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $user = \Drupal::currentUser();
  if ($user->id() != 1) {
    $roles = $user->getRoles();
    // Only validate authenticated user.
    if (count($roles) == 1 && $roles[0] == 'authenticated') {
      $form["#validate"][] = 'wristcheck_basic_check_user_information_validate';
    }
  }
}

function wristcheck_basic_check_user_information_validate(&$form, FormStateInterface $form_state) {
  $user = \Drupal::currentUser()->getAccount();
  $uid = $user->id();
  wristcheck_basic_check_user_infomation($uid, $emptyFields);
  foreach ($emptyFields as $field_name) {
    //check if it the field has value in form_state
    $value = $form_state->getValue($field_name);
    //$definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('user', 'user');
    //$field_type = $definitions[$field_name]->getType();
    //todo : may be need checked by every field_type
    if (isset($value[0]['value']) && empty($value[0]['value'])) {
      if ($field_name == 'field_description') {
        //$form[$field_name]['#attributes']['class'][] = 'error';
        //$form[$field_name]['#attributes']['class'][] = 'is-invalid';
        $form[$field_name]['#prefix'] = '<div class="error is-invalid form-control">';
        $form[$field_name]['#suffix'] = '</div>';
        // Do not know why field_description can not generate the class is-invalid
        $form_state->setErrorByName($field_name, t('Please fill the information.'));
      }
      else {
        $form_state->setErrorByName($field_name, t('Please fill the information.'));
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function wristcheck_basic_form_user_login_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if (isset($_GET['check_user_information'])) {
    //for redirect page
    $form["#action"] .= '&destination=/wristcheck_basic/check_user_info';
  }
}

/**
 * Check user has enough information.
 *
 * @param $uid
 *
 * @return bool
 */
function wristcheck_basic_check_user_infomation($uid, &$emptyFields = NULL) {
  $emptyFields = [];
  $user = User::load($uid);
  $definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('user', 'user');
  $allFields= array_keys($definitions);
  $checkFields = preg_grep("/^field_/", $allFields);
  foreach ($checkFields as $fieldName) {
    if ($user->get($fieldName)->isEmpty()) {
      $emptyFields[] = $fieldName;
    }
  }

  if ($emptyFields) {
    \Drupal::logger('wristcheck_basic')->notice(print_r($emptyFields, TRUE));
    return FALSE;
  }
  else{
    return TRUE;
  }
}

/**
 * Implements hook_views_pre_render().
 * @param ViewExecutable $view
 */
function wristcheck_basic_views_pre_render(ViewExecutable $view) {
  if (isset($view) && ($view->storage->id() == 'wristcheck_order_list')) {
    $view->element['#attached']['library'][] = 'wristcheck_basic/orderStatus';
  }
}


//function wristcheck_basic_views_pre_view(ViewExecutable $view)
//{
//  if (isset($view) && ($view->current_display == "transactions_sell")){
//    $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
//    $Mail = $user->getEmail();
//    $options = array(
//      'id' => 'area_text_custom',
//      'table' => 'views',
//      'field' => 'area_text_custom',
//      'relationship' => 'none',
//      'group_type' => 'none',
//      'admin_label' => '',
//      'empty' => FALSE,
//      'tokenize' => FALSE,
//      'content' => "<div class='row'><div class='col-lg-10'>$Mail</div><div class='col-lg-2'><a href='javascript;'>transport</a></div></div>",
//      'plugin_id' => 'text_custom',
//    );
//    $view->setHandler('transactions_sell', 'header', 'area_text_custom', $options);
//  }
//}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function wristcheck_basic_form_views_form_commerce_cart_form_default_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  $order_id = substr($form_id, strlen('views_form_commerce_cart_form_default_'));
  $order = Order::load($order_id);
  $if_need_insurance_value = isset($order->get('field_if_need_insurance')->getValue()[0]) ?
    $order->get('field_if_need_insurance')->getValue()[0]['value'] : 0;
  $form['insurance'] = [
    '#type' => 'checkbox',
    '#title' => 'WRISTCHECK INSURANCE',
    '#description' => 'description description description...',
    '#default_value' => $if_need_insurance_value,
    '#ajax' => array(
      'callback' => 'wristcheck_basic_if_need_insurance_ajax',
      'wrapper' => 'views-form-commerce-cart-form-default-' . $order_id,
    ),
  ];

  $form['actions']['submit']['#submit'][] = 'wristcheck_basic_cart_update';
}

function wristcheck_basic_cart_update($form, &$form_state) {
  $values = $form_state->getValues();
  $order_id = substr($values["form_id"], strlen('views_form_commerce_cart_form_default_'));
  $order = Order::load($order_id);
  $totalPrice = $order->getTotalPrice();
  //$currency_code = $totalPrice->getCurrencyCode();
  $insurance_rate = \Drupal::config('wristcheck_basic.rateSettings')->get('insurance');
  $adjustment_amount = $totalPrice->multiply($insurance_rate)->divide('100');
  $adjustment = new Adjustment([
    'type' => 'custom',
    'label' => 'Insurance Plus '. $insurance_rate .'%',
    'amount' => $adjustment_amount,
    'percentage' => bcdiv($insurance_rate, '100', 3),
    'included' => FALSE,
    'locked' => TRUE,
  ]);
  if ($values['insurance']) {
    $order->set('field_if_need_insurance', 1);
    $order->setAdjustments([$adjustment]);
    $order->save();
  }
  else {
    $order->set('field_if_need_insurance', 0);
    $order->setAdjustments([]);
    $order->save();
  }
}

function wristcheck_basic_if_need_insurance_ajax($form, &$form_state) {
  wristcheck_basic_cart_update($form, $form_state);
  $response = new AjaxResponse();
  $currentURL = Url::fromRoute('<current>');
  $response->addCommand(new RedirectCommand($currentURL->toString()));
  return $response;
}



