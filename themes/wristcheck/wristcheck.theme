<?php
global $base_url;
global $head_title;
global $product_entity;
global $header_layout;
global $region;
global $por_style;
global $view;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\block\Entity\Block;
use Drupal\taxonomy\Entity\Term;



function wristcheck_theme_suggestions_page_alter(array &$suggestions, array $variables) {
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
        $suggestions[] = 'page__node__' . $node->getType();
    }
    if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
        $term = Term::load($tid);
        $suggestions[] = 'page__taxonomy__' . $term->getVocabularyId();
    }
}
function wristcheck_theme_suggestions_input_alter(&$suggestions, array $variables) {
    $element = $variables['element'];
    if (isset($element['#attributes']['data-shop-submit'])) {
        $suggestions[] = 'input__' . $element['#type'] . '__' . $element['#attributes']['data-shop-submit'];
    }
}

function wristcheck_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if (isset($variables['elements']['content']['#block_content'])) { 
        array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle()); 
    }
  // return $suggestions;
}

function wristcheck_preprocess_block(&$variables) {
    
    global $base_url,$region;   

    switch ($variables['base_plugin_id']) {
        case 'system_branding_block':
            $variables['site_logo'] = '';
            if ($variables['content']['site_logo']['#access'] && $variables['content']['site_logo']['#uri']) {
                $variables['site_logo'] = str_replace('.svg', '.png', $variables['content']['site_logo']['#uri']);
            }
            break;
    }
    $theme      = \Drupal::theme()->getActiveTheme()->getName();
    $variables['theme_path'] = drupal_get_path('theme', $theme);

    if (isset($variables['elements']['#id']) && !empty($variables['elements']['#id'])) {
        $block_id   = $variables['elements']['#id'];
        $block      = \Drupal\block\Entity\Block::load($block_id);
        if ($block->getRegion()) {
            $region = $block->getRegion();
            $variables['region'] = $region;
        }
        //config as context module
    } else {
        $variables['region'] = $variables['elements']['#configuration']['region'];
    }
    $region = $variables['region'];


    $blocks_name = array();
    $arr_block = array();
    $blocks_name = \Drupal::entityManager()->getStorage('block')->loadByProperties(['region' => 'search', 'theme' => \Drupal::theme()->getActiveTheme()->getName()]);
    foreach ($blocks_name as $k => $v) {
        $block = \Drupal\block\Entity\Block::load($k);
        $arr_block[$k] = (\Drupal::entityManager()->getViewBuilder('block')->view($block));
        //print render($arr_block[$k]);
    }
    if (isset($arr_block) && !empty($arr_block)) {
        $variables['search_region'] = $arr_block;
    }
    $blocks_name = array();
    $arr_block = array();
    $blocks_name = \Drupal::entityManager()->getStorage('block')->loadByProperties(['region' => 'cart', 'theme' => \Drupal::theme()->getActiveTheme()->getName()]);
    foreach ($blocks_name as $k => $v) {
        $block = \Drupal\block\Entity\Block::load($k);
        $arr_block[$k] = (\Drupal::entityManager()->getViewBuilder('block')->view($block));
        //print render($arr_block[$k]);
    }
    if (isset($arr_block) && !empty($arr_block)) {
        $variables['cart_region'] = $arr_block;
    }
    $blocks_name = array();
    $arr_block = array();
    $blocks_name = \Drupal::entityManager()->getStorage('block')->loadByProperties(['region' => 'top_header2', 'theme' => \Drupal::theme()->getActiveTheme()->getName()]);
    foreach ($blocks_name as $k => $v) {
        $block = \Drupal\block\Entity\Block::load($k);
        $arr_block[$k] = (\Drupal::entityManager()->getViewBuilder('block')->view($block));
        //print render($arr_block[$k]);
    }
    if (isset($arr_block) && !empty($arr_block)) {
        $variables['account_menu_region'] = $arr_block;
    }
}

function wristcheck_preprocess_node(&$variables) {

    global $base_root,$base_url;
    $variables['base_root'] = $base_root;
    $variables['base_url'] = $base_url;
    $ntype = $variables['node']->getType();
    $site_name = \Drupal::config('system.site')->get('name');
    $variables['site_name'] = $site_name;
    $request = \Drupal::request();

    if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
        $variables['title'] = \Drupal::service('title_resolver')->getTitle($request, $route);
    }   
    if ($ntype == 'portfolio') {

        $created_time = $variables['node']->changed->value;
        $variables['link_next_por'] = generateNextPrevious('next', $created_time, 'portfolio');
        $variables['img_next_por'] = ImageNextPrevious('next', $created_time, 'portfolio');
        $variables['img_prev_por'] = ImageNextPrevious('prev', $created_time, 'portfolio');
        $variables['link_prev_por'] = generateNextPrevious('prev', $created_time, 'portfolio');
        $variables['title_next_por'] = TitleNextPrevious('next', $created_time, 'portfolio');
        $variables['title_prev_por'] = TitleNextPrevious('prev', $created_time, 'portfolio');

    }
    if ($ntype == 'blog_post') {
        $created_time = $variables['node']->changed->value;
        $variables['link_next_blog'] = generateNextPrevious('next', $created_time, 'blog_post');
        $variables['img_next_blog'] = ImageNextPrevious('next', $created_time, 'blog_post');
        $variables['img_prev_blog'] = ImageNextPrevious('prev', $created_time, 'blog_post');
        $variables['link_prev_blog'] = generateNextPrevious('prev', $created_time, 'blog_post');
        $variables['title_next_blog'] = TitleNextPrevious('next', $created_time, 'blog_post');
        $variables['title_prev_blog'] = TitleNextPrevious('prev', $created_time, 'blog_post');
    }   
}

function generateNextPrevious($direction = 'next', $created_time, $content_type) {

    if ($direction === 'next') {
        $comparison_opperator = '>';
        $sort = 'ASC';
    } elseif ($direction === 'prev') {
        $comparison_opperator = '<';
        $sort = 'DESC';
    }

    //Lookup 1 node younger (or older) than the current node
    $query = \Drupal::entityQuery('node');
    $next = $query->condition('changed', $created_time, $comparison_opperator)
            ->condition('type', $content_type)
            ->condition('status', 1)
            ->sort('changed', $sort)
            ->range(0, 1)
            ->execute();

    //If this is not the youngest (or oldest) node
    if (!empty($next) && is_array($next)) {
        $next = array_values($next);
        $next = $next[0];

        //Find the alias of the next node
        $next_url = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $next);

        /**
          Note: In drupal version < 2.0 : $next_url = \Drupal\Core\Url::fromUserInput($next_url);
          version >=2.0 : $next_url = \Drupal\Core\Url::fromUserInput($next_url)->toString();
         */
        $next_url = base_path() . ltrim($next_url, '/');
        $node = \Drupal\node\Entity\Node::load($next);
        $title_field = $node->get('title');
        $title = $title_field->value;
        //$next_link = '<h5 class="title-2"><a href="' . $next_url .'">'.$title.'</a></h5>';
        //$next_url = \Drupal\Core\Url::fromUserInput($next_url)->toString();
        //print $next_url;


        return $next_url;
    }
}
function TitleNextPrevious($direction = 'next', $created_time, $content_type) {

    if ($direction === 'next') {
        $comparison_opperator = '>';
        $sort = 'ASC';
    } elseif ($direction === 'prev') {
        $comparison_opperator = '<';
        $sort = 'DESC';
    }

    //Lookup 1 node younger (or older) than the current node
    $query = \Drupal::entityQuery('node');
    $next = $query->condition('changed', $created_time, $comparison_opperator)
            ->condition('type', $content_type)
            ->condition('status', 1)
            ->sort('changed', $sort)
            ->range(0, 1)
            ->execute();

    //If this is not the youngest (or oldest) node
    if (!empty($next) && is_array($next)) {
        $next = array_values($next);
        $next = $next[0];

        //Find the alias of the next node
        $next_url = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $next);

        /**
          Note: In drupal version < 2.0 : $next_url = \Drupal\Core\Url::fromUserInput($next_url);
          version >=2.0 : $next_url = \Drupal\Core\Url::fromUserInput($next_url)->toString();
         */
        $next_url = base_path() . ltrim($next_url, '/');
        $node = \Drupal\node\Entity\Node::load($next);
        $title_field = $node->get('title');
        $title = $title_field->value;
        //$next_link = '<h5 class="title-2"><a href="' . $next_url .'">'.$title.'</a></h5>';
        //$next_url = \Drupal\Core\Url::fromUserInput($next_url)->toString();
        //print $next_url;


        return $title;
    }
}
function ImageNextPrevious($direction = 'next', $created_time, $content_type) {

    if ($direction === 'next') {
        $comparison_opperator = '>';
        $sort = 'ASC';
    } elseif ($direction === 'prev') {
        $comparison_opperator = '<';
        $sort = 'DESC';
    }

    //Lookup 1 node younger (or older) than the current node
    $query = \Drupal::entityQuery('node');
    $next = $query->condition('changed', $created_time, $comparison_opperator)
            ->condition('type', $content_type)
            ->condition('status', 1)
            ->sort('changed', $sort)
            ->range(0, 1)
            ->execute();

    //If this is not the youngest (or oldest) node
    if (!empty($next) && is_array($next)) {
        $next = array_values($next);
        $next = $next[0];

        //Find the alias of the next node
        $next_url = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $next);

        /**
          Note: In drupal version < 2.0 : $next_url = \Drupal\Core\Url::fromUserInput($next_url);
          version >=2.0 : $next_url = \Drupal\Core\Url::fromUserInput($next_url)->toString();
         */
        $next_url = base_path() . ltrim($next_url, '/');
        $node = \Drupal\node\Entity\Node::load($next);
        $title_field = $node->get('title');
        $image = $node->get('field_images')->getValue();
        $field_images = $image[0]['target_id'];
        $file = File::load($field_images);
        $uri = $file->getFileUri();
        $img_url = file_create_url($uri);
        if (ImageStyle::load('image570x311')){
            $image_uri = ImageStyle::load('image570x311')->buildUrl($file->getFileUri());
        }else{
            $image_uri = $image_url;
        }
        
        //$next_link = '<h5 class="title-2"><a href="' . $next_url .'">'.$title.'</a></h5>';
        //$next_url = \Drupal\Core\Url::fromUserInput($next_url)->toString();
        //print $next_url;


        return $image_uri;
    }
}

/**
 * Implements template_preprocess_html().
 */
function wristcheck_preprocess_html(&$variables) {

    global $base_url, $head_title;
    $head_title = $variables['head_title'];
    $theme      = \Drupal::theme()->getActiveTheme()->getName();
    $variables['attributes']['class'][] = 'ltr';
    $variables['general_setting_tracking_code'] = theme_get_setting('general_setting_tracking_code', $theme);
    $variables['custom_css'] = theme_get_setting('custom_css', $theme);
    $node       = \Drupal::routeMatch()->getParameter('node');
    $variables['theme_path'] = drupal_get_path('theme', $theme);
    /*$variables['#attached']['library'][] = 'wristcheck/wristcheck-lib';*/
    $variables['#attached']['drupalSettings']['path']['themeUrl'] = base_path().\Drupal::theme()->getActiveTheme()->getPath();
}


/**
 * Implements template_preprocess_page().
 */
function wristcheck_preprocess_page(&$variables) {

    global $base_root, $base_url, $view;

    $node   = \Drupal::routeMatch()->getParameter('node');
    $theme  = \Drupal::theme()->getActiveTheme()->getName();
    $variables['theme_path'] = drupal_get_path('theme', $theme);
    $variables['base_url'] = $base_url;
    $request = \Drupal::request();

    if ($route = $request->attributes->get(\Symfony\Cmf\Component\Routing\RouteObjectInterface::ROUTE_OBJECT)) {
        $variables['title'] = \Drupal::service('title_resolver')->getTitle($request, $route);
    }
        
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
        $variables['type'] = $node->getType();
    }
    $view = views_get_current_view();
    $variables['curent_path'] = \Drupal::service('path.current')->getPath();
   
}


function wristcheck_form_search_block_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){
    global $header_layout;
    global $region;
    
       /* if(preg_match('/search_block_form/i', $form_id)){
        unset($form['search_block_form']['#title']); // remove label form
        $form['keys']['#attributes']['placeholder'][] = 'TYPE AND HIT ENTER';
        $form['keys']['#attributes']['class'][] = 'form-control';
        $form['keys']['#prefix'] = '<div class="form-group">';
        $form['keys']['#suffix'] = '</div>';
        $form['actions']['submit']['#value'] = t('SEARCH'); // Change the text on the submit button
        $form['actions']['submit']['#attributes']['class'] = array('btn btn-default');
        // $form['#attributes']['class'] = array('sidebar-search widget-margin');
        $form['actions']['submit']['#attributes']['data-webform-submit'] = 'search_submit';
        }*/
        if(preg_match('/search_block_form/i', $form_id)){
        unset($form['search_block_form']['#title']); // remove label form
        $form['keys']['#attributes']['placeholder'][] = t('Type here');
        $form['keys']['#attributes']['class'][] = 'form-control';
        $form['actions']['submit']['#value'] = t('&#xf002;'); // Change the text on the submit button
        $form['actions']['submit']['#attributes']['class'] = array('fa');
        $form['actions']['submit']['#attributes']['class'] = array('btn btn-default');
        // $form['#attributes']['class'] = array('sidebar-search widget-margin');
        $form['actions']['submit']['#attributes']['data-webform-submit'] = 'search_submit';
        }

    
}


function wristcheck_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id){
    global $region;
    if(preg_match('/views_exposed_form/i', $form_id)){
        $form['actions']['submit']['#attributes']['class'] = array('hidden');
        $form['sort_by']['#attributes']['onchange'] = 'if(this.value != 0) { this.form.submit(); }';
    }elseif(preg_match('/simplenews_subscriptions_block/i', $form_id)){
            $form['#attributes']['class'][] = 'mailchimp';
           $form['actions']['submit']['#attributes']['value'] = t('Add to cart');
            $form['mail']['widget'][0]['value']['#attributes']['class']=array('form-control');
            $form['mail']['widget'][0]['value']['#attributes']['placeholder'][] = 'Subscribe In Our Newsletter';
            $form['actions']['subscribe']['#attributes']['class'] = array('btn');
            $form['actions']['subscribe']['#value'] = t('Sign Up dhskfjhdsk');
    }
    elseif(preg_match('/commerce_order_item_add_to_cart_form_commerce_product/i', $form_id)){
           $form['actions']['submit']['#attributes']['value'] = t('Add to cart');
           $form['actions']['submit']['#attributes']['class'] = array('btn btn-secondary btn-hover');
           $form['actions']['submit']['#attributes']['data-shop-submit'] = 'shop_submit';
        } 
    
}
function wristcheck_preprocess_menu(array &$variables) {
    if ($variables['theme_hook_original'] == 'menu__main') { 
    $items = $variables['items'];
    $variables['logo'] = theme_get_setting('logo.url','wristcheck');
    foreach ($items as $key => $item) {

                $variables['items'][$key]['logo'] = $variables['logo'];
            }
    }
}
function wristcheck_preprocess(&$variables){
    global $por_style;
    global $header_layout;
    global $base_root;
    $variables['base_root'] = $base_root;
    $theme      = \Drupal::theme()->getActiveTheme()->getName();
    $variables['theme_path'] = drupal_get_path('theme', $theme);
    global $product_entity;
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
    
    $variables['type'] = '';
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
        $variables['type'] = $node->getType();
    }
    
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
        $variables['type'] = $node->getType();
    }
    // xóa cache của url
    $variables['#cache']['contexts'][] = 'url';
    // $variables['header_style'] = theme_get_setting('header_layout', 'wristcheck');
    if (!empty(theme_get_setting('color_primary','wristcheck'))) {
        $variables['color_primary']      = theme_get_setting('color_primary','wristcheck');
    }else{
        $variables['color_primary'] = '#b2c81e';
    }
    $variables['header_layout']     = theme_get_setting('header_layout', 'wristcheck');
    $variables['footer_layout'] = theme_get_setting('footer_layout', 'wristcheck');
   
    
    $variables['logo_white_image'] = theme_get_setting('logo_white_image', 'wristcheck');
    
    $variables['background_color']   =    theme_get_setting('background_color','wristcheck');
    $variables['background_style']   =    theme_get_setting('background_style','wristcheck');
    $variables['layout_type']   =    theme_get_setting('layout_type','wristcheck');

    
   
    $variables['blog_layout']   =    theme_get_setting('blog_layout', 'wristcheck');
    $variables['blog_single_style']   =    theme_get_setting('blog_single_style', 'wristcheck');
    $variables['blog_sidebar']   =    theme_get_setting('blog_sidebar', 'wristcheck');
    $variables['shop_sidebar']   =    theme_get_setting('shop_sidebar', 'wristcheck');
    $variables['logo'] = theme_get_setting('logo.url','wristcheck');
     // $variables['page_header_background_image'] = theme_get_setting('page_header_background_image','wristcheck'); 
    $page_header_background_image = theme_get_setting('page_header_background_image','wristcheck');
    $blog_header_background_image = theme_get_setting('blog_header_background_image','wristcheck');
   
   
    
    
    $logo_white_image = theme_get_setting('logo_white_image', 'wristcheck');
    //shop
    if (!empty($logo_white_image)) {
        $file   = file_load($logo_white_image[0]);
        $uri    = $file->getFileUri();
        $path   = file_create_url($uri);
        $variables['logo_white_image'] = $path;
    } else {
        $variables['logo_white_image'] = '';
    }
    $logo_white_image = [];
    
    
    if (!empty($page_header_background_image)) {
        $file   = file_load($page_header_background_image[0]);
        $uri    = $file->getFileUri();
        $path   = file_create_url($uri);
        $variables['page_header_background_image'] = $path;
    } else {
        $variables['page_header_background_image'] = '';
    }
    $page_header_background_image = [];

    //end shop
    if (!empty($blog_header_background_image)) {
        $file   = file_load($blog_header_background_image[0]);
        $uri    = $file->getFileUri();
        $path   = file_create_url($uri);
        $variables['blog_header_background_image'] = $path;
    } else {
        $variables['blog_header_background_image'] = '';
    }
    $blog_header_background_image = [];
    
    if (isset( $_GET['layout'] )){
        $variables['blog_layout']   = $_GET['layout'];
        $variables['blog_single_style']   = $_GET['layout'];
        $variables['layout_type']   = $_GET['layout'];
    }
    if (isset( $_GET['header'] )){
        $variables['header_layout'] = $_GET['header'];
    }

    if (isset( $_GET['footer'] )){
        $variables['footer_layout'] = $_GET['footer'];
    }
    
    if (isset( $_GET['loading'])){
        $variables['loading_style'] = $_GET['loading'];
    }
    if (isset( $_GET['sidebar'] )){
        $variables['blog_sidebar']   = $_GET['sidebar'];   
        $variables['shop_sidebar']   = $_GET['sidebar'];   
    }
    //test
    if(\Drupal::routeMatch()->getParameter('node')){
        $node = \Drupal::routeMatch()->getParameter('node');
       
        // if (isset($node->field_page_bckground) && !empty($node->field_page_bckground->getValue()[0]['value'])) {
        //     $variables['page_header_background_image'] = $node->field_page_bckground->getValue()[0]['value'];
        // }
        if (isset($variables['node']->field_page_bckground)) {
        $field_page_bckground = $variables['node']->get('field_page_bckground')->getValue();
        // If a file has been uploaded, get it.
        if (!empty($field_page_bckground)) {
            $field_background_image_id = $field_page_bckground[0]['target_id'];
            $file = File::load($field_background_image_id);

            // Otherwise get the default if there is one.
        } else {
            $default_image = $variables['node']->getFields()['field_page_bckground']->getFieldDefinition()->getSetting('default_image');
            $file = Drupal::service('entity.repository')->loadEntityByUuid('file', $default_image['uuid']);
        }

        // If a file has been found (there might not be a default), get its path.
        if ($file) {
            $path = $file->getFileUri();
            //$variables['background_image'] = ImageStyle::load('img_style_name')->buildUrl($path);
            $variables['page_header_background_image'] = file_create_url($path);
            }
        }
        // field video
        
        //end
       
        $type = $node->getType();
        
        if (isset($node->field_style) && !empty($node->field_style->getValue()[0]['value'])) {
            $variables['style_por'] = $node->field_style->getValue()[0]['value'];
        }
        if (isset($node->field_list_portfolio_style) && !empty($node->field_list_portfolio_style->getValue()[0]['value'])) {
            $variables['style_por'] = $node->field_list_portfolio_style->getValue()[0]['value'];
        }
        
        if (isset($node->field_sidebar) && !empty($node->field_sidebar->getValue()[0]['value'])) {
            $variables['sider_style'] = $node->field_sidebar->getValue()[0]['value'];
        }
        if (isset($node->field_header) && !empty($node->field_header->getValue()[0]['value'])) {
            $variables['header_layout'] = $node->field_header->getValue()[0]['value'];
        }
        if (isset($node->field_page_layout) && !empty($node->field_page_layout->getValue()[0]['value'])) {
            $variables['onepage_layout'] = $node->field_page_layout->getValue()[0]['value'];
        }
        if (isset($node->field_footer) && !empty($node->field_footer->getValue()[0]['value'])) {
            $variables['footer_layout'] = $node->field_footer->getValue()[0]['value'];
        }
        // if (isset($node->field_default_sidebar_1) && !empty($node->field_default_sidebar_1->getValue()[0]['value'])) {
        //     $variables['shop_single'] = $node->field_default_sidebar_1->getValue()[0]['value'];
        // }
        $header_layout = $variables['header_layout'];
    }

    // Background in html.html.twig field
    $background = theme_get_setting('default_breadcrumb_image', 'wristcheck');
    if (!empty($background)) {
        $file   = file_load($background[0]);
        $uri    = $file->getFileUri();
        $path   = file_create_url($uri);
        $variables['theme_page_header_bg'] = $path;
    } else {
        $variables['theme_page_header_bg'] = '';
    }

        // Background in html.html.twig field
    $background_image = theme_get_setting('background_image','wristcheck');
    if (!empty($background_image)) {
        $file   = file_load($background_image[0]);
        $uri    = $file->getFileUri();
        $path   = file_create_url($uri);
        $variables['theme_background_image'] = $path;
    } else {
        $variables['theme_background_image'] = '';
    }

 /*   
    $boxed_img  = theme_get_setting('background_image','wristcheck');
    if (!empty($boxed_img)) {
        $file   = file_load($boxed_img[0]);
        $uri    = $file->getFileUri();
        $path   = file_create_url($uri);
        $variables['background_image'] = $path;
    } else {
        $variables['background_image'] = '';
    }*/
    $boxed_img1  = theme_get_setting('background_image_1','wristcheck');
    if (!empty($boxed_img)) {
        $file   = file_load($boxed_img1[0]);
        $uri    = $file->getFileUri();
        $path   = file_create_url($uri);
        $variables['background_image_1'] = $path;
    } else {
        $variables['background_image_1'] = '';
    }
    
    //hết
    $pageURL = 'http';  
    if(!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on'){
        $pageURL .= "s";
    }
    $pageURL .= '://';
    if($_SERVER['SERVER_PORT'] != '80'){
    $pageURL .= $_SERVER['SERVER_NAME'].":".$_SERVER['SERVER_PORT'].$_SERVER['REQUEST_URI'];
    }else{
        $pageURL .= $_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI'];
    }
    $variables['pageURL'] = $pageURL;
}


function wristcheck_preprocess_breadcrumb(&$variables) {
    global $head_title;
    if ($variables['breadcrumb'] && isset($head_title['title'])) {
        $variables['breadcrumb'][] = array(
            'text' => $head_title['title'],
        );
    }
}

/**
 * Theme override to display a single Drupal page while offline.
 * 
 * &$variables
 */
function wristcheck_preprocess_maintenance_page(&$variables) {
    $maintenance_form = \Drupal::formBuilder()->getForm('Drupal\wristcheck_basic\Form\MaintenanceForm');
    $variables['maintenance_form'] = $maintenance_form;
}

