<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\commerce_product\Entity\Product;
use Drupal\Core\Form\FormStateInterface;
use Drupal\responsive_image\Entity\ResponsiveImageStyle;
use Drupal\file\Entity\File;

/**
 * Prepares variables for view templates.
 *
 * Default template: views-view.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - view: The ViewExecuditable object.
 */
function wristcheck_barrio_preprocess_views_view(&$variables)
{
  static $append_views_class = [
    'wristcheck_products' => [
      'best_sellers' => [
        'row_class' => 'swiper-slide',
        'class' => 'swiper-wrapper',
        'wrapper_class' => 'swiper-container'
      ],
      'product_search_result' => [
        'wrapper_class' => 'item-list portfolio',
        'class' => 'wc-buy-more-products'
      ],
      'hot_recommended' => [
        'wrapper_class' => 'item-list portfolio',
        'class' => 'wc-buy-more-products'
      ]
    ]
  ];


  $id = $variables['id'];
  $display_id = $variables['display_id'];

  if (isset($append_views_class[$id])) {
    $view_class = $append_views_class[$id];

    $view = $variables['view'];

    array_walk($view_class, function ($v, $k) use ($display_id, &$view) {
      if ($display_id == $k) {
        $options = $view->style_plugin->options;
        array_walk($v, function ($vv, $kk) use (&$options) {
          $current_class = explode(' ', $options[$kk]);
          array_push($current_class, $vv);
          $current_class = array_unique($current_class);
          $options[$kk] = implode($current_class, ' ');
        });
        $view->style_plugin->options = $options;
      }
    });
  }
}

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function wristcheck_barrio_form_system_theme_settings_alter(&$form, FormStateInterface $form_state)
{
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );

  $form['logo']['settings']['logo_mobile_upload'] = [
    '#type' => 'managed_file',
    '#title' => t('Upload mobile logo image'),
    '#upload_location' => \Drupal::config('system.file')->get('default_scheme') . '://theme/logo/',
    '#default_value' => theme_get_setting('logo_mobile_upload'),
    '#upload_validators' => array(
      'file_validate_extensions' => array('gif png jpg jpeg'),
    ),
  ];
}

/**
 * Theme override to display a single Drupal page while offline.
 *
 * &$variables
 */
function wristcheck_barrio_preprocess_maintenance_page(&$variables)
{
  $webform = \Drupal::entityTypeManager()->getStorage('webform')->load('wristcheck_maintenance_form');
  $maintenance_form = $webform->getSubmissionForm();

//  $maintenance_form = \Drupal::formBuilder()->getForm('Drupal\wristcheck_basic\Form\MaintenanceForm');
  $variables['maintenance_form'] = $maintenance_form;
}

function wristcheck_barrio_preprocess_node(&$variables)
{
  $nodeid =$variables["attributes"]["data-history-node-id"];
  $node = \Drupal::entityManager()->getStorage('node')->load($nodeid);
  $node_summary = $node->get('body')->summary;
  $variables['nodesumm'] = $node_summary;
  $sell_form = \Drupal::formBuilder()->getForm('Drupal\wristcheck_basic\Form\SellAddToCartForm');
  $variables['sell_form'] = $sell_form;
}

function wristcheck_barrio_preprocess_breadcrumb(&$variables)
{
  $current_path = \Drupal::service('path.current')->getPath();
  $patterns = '/product/*';
  $match = \Drupal::service('path.matcher')->matchPath($current_path, $patterns);
  if ($match) {
    $result = [['text' => 'Buy', 'url' => '/buy']];
    $product_id = substr($current_path, strlen('/product/'));
    preg_match('/[\d]*/', $product_id, $matches);
    if (count($matches) == 1 && $matches[0] == $product_id) {
      $product = Product::load($product_id);
      $field_cate = $product->get('field_cate')->getValue();
      if (isset($field_cate[0]['target_id'])) {
        $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($field_cate[0]['target_id']);
        $title = $term->getName();
        array_push($result,['text' => $title, 'url' => '/brand/'. $title]);
      }
      $field_watch_series = $product->get('field_watch_series')->getValue();
      if (isset($field_watch_series[0]['target_id'])) {
        $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($field_watch_series[0]['target_id']);
        $title = $term->getName();
        array_push($result,['text' => $title, 'url' => '/#']);
      }
      $variables['breadcrumb'] = $result;
      return;
    }
    else {
      $variables['breadcrumb'] = [];
      return;
    }
  }

  $view = \Drupal\views\Views::getView('wristcheck_buy_magazine');
  $view->execute('single');
  global $head_title;
  foreach ($view->result as $row) {
    $head_title['title'] = $row->_entity->get('title')->value;
  }
  global $head_title;
  $result = [];
  array_push($result, array('text' => 'HOME', 'url' => '/'), array('text' => 'MAGAZINE'), array('text' => $head_title['title']));
  if ($variables['breadcrumb'] && isset($head_title['title'])) {
    $variables['breadcrumb'] = $result;
  }
}

function wristcheck_barrio_preprocess_menu(array &$variables, $hook)
{
//user info slider
  if ($hook == "menu__wristcheck_user_sidebar_menu") {
    $current_path = \Drupal::request()->getRequestUri();
    $path_args = explode('/', $current_path);
    $items = $variables['items'];
    foreach ($items as $key => $item) {
      $urlString = $item['url']->toString();

      if ($item['url']->toString() == $current_path) {
        // Add active link.
        $variables['items'][$key]['attributes']['class'] = 'active';
      } elseif ($item['url']->toString() == "" && $path_args[2] == "transactions") {
        $variables['items'][$key]['attributes']['class'] = 'active';
      }
    }
  }
  if ($variables['theme_hook_original'] == 'menu__main') {
    $items = $variables['items'];
    $variables['logo'] = theme_get_setting('logo.url', 'wristcheck');
    foreach ($items as $key => $item) {
      $variables['items'][$key]['logo'] = $variables['logo'];
    }
  }
}


//for payment succ & step css name
function wristcheck_barrio_preprocess_html(array &$variables)
{
  $path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $path);
  $variables['userid'] = \Drupal::currentUser()->id();
  if (in_array("payment-success", $path_args) || in_array("payment-step", $path_args)) {
    if (count($path_args) > 2) {
      if ($path_args[3] == "payment-success") {
        $variables['attributes']['class'][] = 'payment-success';
      }
      if ($path_args[3] == "payment-step") {
        $variables['attributes']['class'][] = 'payment-step';
      }
    }
  }
  if (isset($variables['page']) && isset($variables['page']['header'])) {
    $fid = theme_get_setting('logo_mobile_upload');
    if (is_array($fid) && sizeof($fid) > 0) {
      $file = File::load($fid[0]);
      if (!is_null($file)){
        $variables['page']['header']['logo_mobile'] = $file->url();
      }else{
        $variables['page']['header']['logo_mobile'] = null;
      }
    } else {
      $variables['page']['header']['logo_mobile'] = null;
    }
  }
}


//for payment succ & step css name
function wristcheck_barrio_preprocess_user(array &$variables)
{
  $path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $path);
  if ($path_args[1] == "user") {
    $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
    $variables['mail'] = $user->getEmail();
    $variables['phone'] = $user->get('field_phone_number')->value;
    if (count($user->field_surnames->getValue()) > 0) {
      $variables['surname'] = array_values($user->field_surnames->getValue()[0])[0];
    }
    $variables['gender'] = array_values($user->field_gender->getValue()[0])[0];
    if (count($user->field_date_of_birth->getValue()) > 0) {
      $variables['birth'] = date("Y/m/d", strtotime(array_values($user->field_date_of_birth->getValue()[0])[0]));
    }
    $variables['name'] = $user->getUsername();
    $variables['lang'] = \Drupal::languageManager()->getCurrentLanguage()->getName();
    $variables['news'] = $user->get('field_newsletter')->value;
    $variables['cooperate'] = $user->get('field_we_cooperate_in')->value;
    $variables['guide'] = $user->get('field_guide')->value;
    $variables['price'] = $user->get('field_price_warning')->value;
    $entity_ids = \Drupal::entityTypeManager()
      ->getStorage('node')
      ->getQuery()
      ->condition('type', 'portfolio')
      ->condition('uid', '1')
      ->sort('created.value', 'DESC')
      ->range(0, 1)->execute();
    $variables['porttime'] = date("M d,Y", \Drupal\node\Entity\Node::load(array_values($entity_ids)[0])->created->getValue()[0]['value']);
    $variables['userobj'] = $user;
    $variables['userid'] = \Drupal::currentUser()->id();
  }else {
    $variables['tag'] = 'nouser';
  }
}

function wristcheck_barrio_library_info_alter(&$libraries, $extension) {
  // Add our own extension to drupal.ajax, which is aware of the page markup so
  // can add AJAX progress loaders in the page.
  if ($extension == 'core' && isset($libraries['drupal.ajax'])) {
    $libraries['drupal.ajax']['js']['/' . drupal_get_path('theme', 'wristcheck_barrio') . '/js/ajax-overrides.js'] = [];
  }
}

